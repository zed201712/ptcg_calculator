//
//  PtcgTester.swift
//  ptcg_calculator
//
//  Created by Yuu on 2025/1/3.
//

import Foundation

protocol 寶可夢測試者 {
    func 測試()
}
extension 寶可夢測試者 {
    static func 執行所有測試() {
        let 所有測試者: [寶可夢測試者] = [
            大木博士測試者(),
        ]
        
        for 測試者 in 所有測試者 {
            測試者.測試()
        }
    }
}
class 實體測試者: 寶可夢測試者 {
    func 測試() {}
}

struct 寶可夢測試者牌組資料 {
    let 手牌: [寶可夢牌]?
    let 抽牌堆: [寶可夢牌]?
    let 棄牌堆: [寶可夢牌]?
    
    func 設定玩家牌堆(_ 玩家: 寶可夢玩家) {
        let 初始化手牌 = 手牌 ?? []
        let 初始化抽牌堆 = 抽牌堆 ?? []
        let 初始化棄牌堆 = 棄牌堆 ?? []
        
        let 初始化牌組 = 初始化棄牌堆 + 初始化手牌 + 初始化抽牌堆
        
        玩家.測試用重置抽牌堆(初始化牌組)
        玩家.抽牌(數量: 初始化棄牌堆.count + 初始化手牌.count)
        玩家.棄牌(數量: 初始化棄牌堆.count)
    }
    
    func 比對結果(_ 玩家: 寶可夢玩家) {
        if let 預測手牌 = 手牌 {
            assert(預測手牌 == 玩家.手牌, "\(玩家.牌堆數量資訊())")
        }
        if let 預測抽牌堆 = 抽牌堆 {
            assert(預測抽牌堆 == 玩家.抽牌堆, "\(玩家.牌堆數量資訊())")
        }
        if let 預測棄牌堆 = 棄牌堆 {
            assert(預測棄牌堆 == 玩家.棄牌堆, "\(玩家.牌堆數量資訊())")
        }
    }
}

class 寶可夢基礎測試者 {
    let 玩家 = 測試者用寶可夢玩家()
    private(set) lazy var 遊戲 = 測試者用寶可夢TCG(所有玩家: [玩家])
    
    func 重置數據() {
        玩家.重置數據()
        遊戲.重置數據()
    }
    
    func 測試(_ 牌組: 寶可夢測試者牌組資料, 牌組數量上限: Int, 測試過程: ()->Void) {
        遊戲.牌組數量上限 = 牌組數量上限
        遊戲.重置()
        
        牌組.設定玩家牌堆(玩家)
        
        重置數據()
        測試過程()
    }
}

class 測試者用寶可夢TCG: 寶可夢TCG {
    var 重新開始次數: Int = 0
    var 重置次數: Int = 0
    var 準備次數: Int = 0
    var 開始次數: Int = 0
    
    func 重置數據() {
        重新開始次數 = 0
        重置次數 = 0
        準備次數 = 0
        開始次數 = 0
    }
    
    override func 重新開始() {
        super.重新開始()
        重新開始次數 += 1
    }
    override func 重置() {
        super.重置()
        重置次數 += 1
    }
    override func 準備() {
        super.準備()
        準備次數 += 1
    }
    override func 開始() {
        super.開始()
        開始次數 += 1
    }
    
}

class 測試者用寶可夢玩家: 寶可夢玩家 {
    var 重置牌組次數: Int = 0
    var 重置次數: Int = 0
    var 洗牌次數: Int = 0
    var 準備次數: Int = 0
    var 抽牌次數: Int = 0
    var 新回合次數: Int = 0
    var 出牌次數: Int = 0
    var 棄牌次數: Int = 0
    
    func 重置數據() {
        重置牌組次數 = 0
        重置次數 = 0
        洗牌次數 = 0
        準備次數 = 0
        抽牌次數 = 0
        新回合次數 = 0
        出牌次數 = 0
        棄牌次數 = 0
    }
    
    override func 重置牌組(_ 牌組: [寶可夢牌]) {
        super.重置牌組(牌組)
        重置牌組次數 += 1
    }
    override func 重置() {
        super.重置()
        重置次數 += 1
    }
    override func 洗牌() {
        super.洗牌()
        洗牌次數 += 1
    }
    override func 準備() {
        super.準備()
        準備次數 += 1
    }
    override func 抽牌(數量: Int) {
        super.抽牌(數量: 數量)
        抽牌次數 += 1
    }
    override func 新回合() {
        super.新回合()
        新回合次數 += 1
    }
    override func 出牌() {
        super.出牌()
        出牌次數 += 1
    }
    override func 棄牌(_ 卡: 寶可夢牌) -> Bool {
        棄牌次數 += 1
        return super.棄牌(卡)
    }
}

class 大木博士測試者: 寶可夢測試者, 寶可夢TCG控制器 {
    private let 測試者 = 寶可夢基礎測試者()
    private var 目前回合: Int {遊戲.目前回合}
    private var 玩家: 寶可夢玩家 {測試者.玩家}
    private var 遊戲: 寶可夢TCG {測試者.遊戲}
    
    private var 目前測試編號: Int = 0
    private var 預測結束結果: [[寶可夢測試者牌組資料]] = [
        //測試編號 = 0
        [
            .init(
                手牌: [
                    .大木博士,
                ],
                抽牌堆: .init(牌: .雜牌, 數量: 4) + [
                    .大木博士,
                    .雜牌,
                    .雜牌,
                ],
                棄牌堆: []
            ),
            
            //回合 = 1
            .init(
                手牌: .init(牌: .雜牌, 數量: 3),
                抽牌堆: [
                    .雜牌,
                    .大木博士,
                    .雜牌,
                    .雜牌,
                ],
                棄牌堆: [
                    .大木博士
                ]
            ),
            //回合 = 2
            .init(
                手牌: .init(牌: .雜牌, 數量: 4),
                抽牌堆: [
                    .大木博士,
                    .雜牌,
                    .雜牌,
                ],
                棄牌堆: [
                    .大木博士,
                ]
            ),
            //回合 = 3
            .init(
                手牌: .init(牌: .雜牌, 數量: 6),
                抽牌堆: [
                ],
                棄牌堆: [
                    .大木博士,
                    .大木博士,
                ]
            ),
        ],
        
        //測試編號 = 1
        [
            .init(
                手牌: [
                    .大木博士,
                    .大木博士,
                ],
                抽牌堆: .init(牌: .雜牌, 數量: 4) + [
                    .大木博士,
                    .雜牌,
                    .雜牌,
                ],
                棄牌堆: []
            ),
            
            //回合 = 1
            .init(
                手牌: [.大木博士] + .init(牌: .雜牌, 數量: 3),
                抽牌堆: [
                    .雜牌,
                    .大木博士,
                    .雜牌,
                    .雜牌,
                ],
                棄牌堆: [
                    .大木博士,
                ]
            ),
            //回合 = 2
            .init(
                手牌: .init(牌: .雜牌, 數量: 4) + [.大木博士, .雜牌],
                抽牌堆: [
                    .雜牌,
                ],
                棄牌堆: [
                    .大木博士,
                    .大木博士,
                ]
            ),
            //回合 = 3
            .init(
                手牌: .init(牌: .雜牌, 數量: 6),
                抽牌堆: [
                ],
                棄牌堆: [
                    .大木博士,
                    .大木博士,
                    .大木博士,
                ]
            ),
        ],
    ]
    
    func 測試() {
        遊戲.控制器 = self
        玩家.出牌策略 = [
            .init(牌: .大木博士, 只出一張: true)
        ]
        
        for 測試編號 in 0 ..< 預測結束結果.count {
            目前測試編號 = 測試編號
            測試者.測試(
                預測結束結果[測試編號][0],
                牌組數量上限: 20
            ) {
                self.遊戲.開始()
            }
        }
    }
    
    func 回合結束(_ 玩家: 寶可夢玩家) {
        debug_msg(self.玩家, 0, "測試者[\(目前測試編號)], 回合[\(目前回合)]")
        預測結束結果[目前測試編號][目前回合].比對結果(self.玩家)
    }
    
    func 是否遊戲結束() -> Bool {
        測試者.遊戲.目前回合 >= 預測結束結果[目前測試編號].count - 1
    }
    
    func 遊戲結束() {}
}
