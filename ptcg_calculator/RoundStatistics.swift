//
//  RoundStatistics.swift
//  ptcg_calculator
//
//  Created by Yuu on 2025/1/11.
//

import Foundation

extension Double {
    func 小數點後(_ 位數: Int) -> String {
        guard 位數 > 0 else { return String(Int(self)) }
        
        let formatTxt = "%.\(位數)f"
        return .init(format: formatTxt, self)
    }
}

class 回合統計表: MyCodable {
    static let 小數點位數 = 1
    typealias 統計資料類型 = [[Int]]
    
    enum 顯示類型 {
        case JSON
        case 標準
        case 表格
    }
    enum 顯示資料類型 {
        case 整數次數
        case 百分比
    }
    
    private var 目前x軸: Int = 0
    private(set) var 名稱 = ""
    private var x軸範圍 = 1...2
    private var 測試次數整數 = 0
    private var 測試次數 = Double(0)
    private var 達成次數: 統計資料類型 = []
    
    init() {}
    
    static func 合併(_ array: [回合統計表]) -> [回合統計表] {
        var 未合併統計表 = array.map({ 複製資料($0) })
        var 所有統計表: [回合統計表] = []
        while var 新統計表 = 未合併統計表.first {
            未合併統計表 = Array(未合併統計表.dropFirst())
            for i in (0 ..< 未合併統計表.count).reversed() {
                if 可嚴格合併(新統計表, 未合併統計表[i]) {
                    新統計表 = 嚴格合併([ 新統計表, 未合併統計表[i] ])
                    未合併統計表.remove(at: i)
                }
            }
            所有統計表.append(新統計表)
        }
        
        return 所有統計表
    }
    
    private static func 可嚴格合併(_ 表1: 回合統計表, _ 表2: 回合統計表) -> Bool {
        (表1.名稱 == 表2.名稱)
        && (表1.x軸範圍 == 表2.x軸範圍)
        && (表1.達成次數.count == 表2.達成次數.count)
        && ( (表1.達成次數.first?.count ?? 0) == (表2.達成次數.first?.count ?? 0) )
    }
    
    private static func 嚴格合併(_ array: [回合統計表]) -> 回合統計表 {
        let first = array.first!
        assert(
            array.first(where: {
                可嚴格合併(first, $0) == false
            }) == nil
        )
        
        let result = 回合統計表.複製資料(first)
        result.測試次數整數 = array.reduce(0, {$0 + $1.測試次數整數})
        result.測試次數 = Double(result.測試次數整數)
        
        for rhs in array.dropFirst() {
            result.達成次數 = 回合統計表.疊加(result.達成次數, rhs.達成次數)
        }
        
        return result
    }
    
    static func 複製資料(_ 統計表: 回合統計表) -> 回合統計表 {
        回合統計表(data: 統計表.jsonData!)!
    }
    
    func 重置牌組計算範圍(_ 玩家: 寶可夢玩家, 最低 最低雜牌基礎寶可夢數量: Int) -> ClosedRange<Int> {
        玩家.重置牌組(玩家.預設牌組())
        玩家.重置()
        let 雜牌數量 = 玩家.抽牌堆.filter({$0.是雜牌()}).count
        let 最低雜牌基礎寶可夢數量 = min(max(最低雜牌基礎寶可夢數量, 0), 雜牌數量)
        let 雜牌基礎寶可夢數量範圍 = 最低雜牌基礎寶可夢數量 ... 雜牌數量
        
        return 雜牌基礎寶可夢數量範圍
    }
    
    func 重置(_ 測試次數: Int, 名稱: String = "", 範圍 x軸範圍: ClosedRange<Int>, 回合數上限: Int) {
        self.測試次數整數 = 測試次數
        self.測試次數 = Double(測試次數)
        self.x軸範圍 = x軸範圍
        self.名稱 = 名稱
        
        let empty: [Int] = Array(repeating: 0, count: 回合數上限 + 1)
        達成次數 = Array(repeating: empty, count: x軸範圍.count)
    }
    
    func 設定(數量 目前雜牌基礎寶可夢數量: Int) {
        self.目前x軸 = 目前雜牌基礎寶可夢數量
    }
    
    func 加次數(_ 回合: Int, 次數: Int = 1) {
        達成次數[目前x軸 - x軸範圍.lowerBound][回合] += 次數
    }
    
    func 左右項差距次數() -> 回合統計表 {
        let result = 回合統計表.複製資料(self)
        
        result.達成次數 = result.達成次數.array2Map {x, 回合, value in
            guard x > 0 else { return 0 }
            return result.達成次數[x][回合] - result.達成次數[x - 1][回合]
        }
        
        return result
    }
    
    func 修改測試次數(_ 倍數: Int) -> 回合統計表 {
        let result = 回合統計表.複製資料(self)
        guard 倍數 != 1 else { return result }
        
        result.測試次數整數 = result.測試次數整數 * 倍數
        result.測試次數 = Double(result.測試次數整數)
        let 回合範圍 = (0 ..< result.達成次數.first!.count)
        for 回合 in 回合範圍 {
            for x in (0 ..< result.達成次數.count) {
                result.達成次數[x][回合] *= 倍數
            }
        }
        
        return result
    }
    
    func 製作差距表<T>(_ 比較對象統計表: 回合統計表, transform: (Int, Int)->T) -> [[T]] {
        let result = 回合統計表.複製資料(self)
        let anotherOne = 回合統計表.複製資料(比較對象統計表)
        
        let minX = max(result.x軸範圍.lowerBound, anotherOne.x軸範圍.lowerBound)
        let maxX = min(result.x軸範圍.upperBound, anotherOne.x軸範圍.upperBound)
        
        func 調整X(_ table: 回合統計表) {
            let 前方多餘數量 = minX - table.x軸範圍.lowerBound
            let 後方多餘數量 = table.x軸範圍.upperBound - maxX
            
            table.達成次數 = table.達成次數.dropFirst(前方多餘數量).dropLast(後方多餘數量)
            table.x軸範圍 = minX ... maxX
        }
        
        調整X(result)
        調整X(anotherOne)
        
        return result.達成次數.array2Map { x, 回合, _ in
            transform(
                result.達成次數[x][回合],
                anotherOne.達成次數[x][回合]
            )
        }
    }
    
    private static func 疊加(_ lhs: 統計資料類型, _ rhs: 統計資料類型) -> 統計資料類型 {
        guard !lhs.isEmpty else { return lhs }
        
        assert( lhs.count == rhs.count )
        assert( lhs.first!.count == lhs.first!.count )
        
        let 回合範圍 = (0 ..< lhs.first!.count)
        var result = lhs
        for x in 0 ..< lhs.count {
            for 回合 in 回合範圍 {
                result[x][回合] += rhs[x][回合]
            }
        }
        
        return result
    }
    
    func 加總() -> 回合統計表 {
        let result = 回合統計表.複製資料(self)
        
        let 第一項 = result.達成次數.first!
        for x in 0 ..< result.達成次數.count {
            for 回合 in 1 ..< 第一項.count {
                result.達成次數[x][回合] += result.達成次數[x][回合 - 1]
            }
        }
        
        return result
    }
    
    private func 去尾() -> 回合統計表 {
        let result = 回合統計表.複製資料(self)
        
        let 第一項 = result.達成次數.first!
        let 回合範圍 = (0 ..< 第一項.count)
        
        let 全百分百回合 = Array(回合範圍).firstIndex(where: { 回合 in
            (0 ..< result.達成次數.count).first(
                where: { x in
                    result.達成次數[x][回合] < result.測試次數整數
                }
            ) == nil
        }) ?? (回合範圍.count - 1)
        for x in 0 ..< result.達成次數.count {
            result.達成次數[x] = Array(result.達成次數[x].prefix(全百分百回合 + 1))
        }
        
        return result
    }
    
    private static func 次數轉小數點(_ 次數: Int, _ 測試次數: Double) -> String {
        let probability = (Double(次數) / 測試次數 * 100).小數點後(小數點位數)
        return "\(probability)"
    }
    private static func 製表(_ 達成次數: 統計資料類型, _ 測試次數: Double) -> [[String]] {
        return 達成次數.array2Map {
            次數轉小數點($0, 測試次數)
        }
    }
    
    private func 製表(_ 資料類型: 顯示資料類型) -> [[String]] {
        return (資料類型 == .百分比)
        ? 回合統計表.製表(達成次數, 測試次數)
        : 達成次數.array2Map({String($0)})
    }
    
    private static func 旋轉後加標題(_ 圖表: [[String]], _ x軸範圍: ClosedRange<Int>) -> [[String]] {
        var array: [[String]] = 圖表
        
        //旋轉
        array = array.getGridArray(isRotate: true)
        
        //左標題
        for (index, element) in array.enumerated() {
            array[index] = ["\(index)"] + element
        }
        
        //上標題
        let title = [""] + x軸範圍.map({String($0)})
        array.insert(title, at: 0)
        
        return array
    }
    
    func 顯示結果(_ 類型: 顯示類型 = .JSON, 資料類型: 顯示資料類型 = .百分比) {
        guard 類型 != .JSON else {
            print(self.jsonString!)
            return
        }
        
        let 新統計表 = self.加總().去尾()
        let 文字表 = 新統計表.製表(資料類型)
        
        switch 類型 {
        case .JSON:
            break
        case .標準:
            新統計表.顯示標準結果(文字表)
        case .表格:
            新統計表.顯示表格結果(文字表)
        }
    }
    
    static func 轉換百分比後相減(_ 表1: 回合統計表, 表1目前次數: Int, 表2: 回合統計表, 表2目前次數: Int) -> Double {
        (Double(表1目前次數) * 100 / 表1.測試次數) - (Double(表2目前次數) * 100 / 表2.測試次數)
    }
    
    func 顯示比較結果(_ 類型: 顯示類型 = .表格, 比較 比較對象統計表: 回合統計表, 忽略最小值: Double = 0.1, transform: ((回合統計表, Int, 回合統計表, Int)->Double)? = nil ) {
        let transform = transform ?? 回合統計表.轉換百分比後相減
        
        let result = 回合統計表.複製資料(self)
        let anotherOne = 回合統計表.複製資料(比較對象統計表)
        let comparisonTable = result.製作差距表(anotherOne) {
            transform(result, $0, anotherOne, $1)
        }
        result.名稱 = result.名稱 + ".vs." + anotherOne.名稱
        
        var resultTable = result.製表(.百分比)
        resultTable = resultTable.array2Map { y, x, value in
            let comparisonValue = abs(comparisonTable[y][x]) > 忽略最小值
            ? "(\(comparisonTable[y][x].小數點後(回合統計表.小數點位數)))"
            : ""
            return value + comparisonValue
        }
        
        switch 類型 {
        case .JSON:
            fatalError("不支援")
        case .標準:
            result.顯示標準結果(resultTable)
        case .表格:
            result.顯示表格結果(resultTable)
        }
    }
    
    private func 顯示標準結果(_ 文字表: [[String]]) {
        print(名稱 + "[\(測試次數整數)]")
        print(回合統計表.旋轉後加標題(文字表, x軸範圍).reduce("", {$0 + "\n" + $1.joined(separator: ",")}).dropFirst() + "\n")
    }
    
    private func 顯示表格結果(_ 文字表: [[String]]) {
        print(名稱 + "[\(測試次數整數)]")
        print(回合統計表.旋轉後加標題(文字表, x軸範圍).matterMostOutput())
    }
    
    static func 組合運算後結果(_ array: [回合統計表]) -> [回合統計表] {
        let 所有統計表名稱 = array.map(\.名稱).removeDuplicates()
        let 所有統計表分類: [[回合統計表]] = 所有統計表名稱.map({ 統計表名稱 in
            array.filter({$0.名稱 == 統計表名稱}).sorted(by: {$0.x軸範圍.lowerBound < $1.x軸範圍.lowerBound})
        })
        
        let 所有統計表: [回合統計表] = 所有統計表分類.map({
            guard $0.count > 1 else { return $0[0] }
            let first = $0.first!
            let last = $0.last!
            
            let result = 回合統計表.複製資料(first)
            result.x軸範圍 = first.x軸範圍.lowerBound ... last.x軸範圍.upperBound
            result.達成次數 = []
            
            $0.forEach({
                result.達成次數.append(contentsOf: $0.達成次數)
            })
            return result
        })
        
        return 所有統計表
    }
    
    static func 組合運算後顯示結果(_ array: [回合統計表]) -> [回合統計表] {
        let 所有統計表 = 組合運算後結果(array)
        
        for 統計表 in 所有統計表 {
            統計表.顯示結果()
        }
        return 所有統計表
    }
    
    
    //MARK: - Tests
    static func 執行所有測試() {
        回合統計表.測試嚴格合併()
        回合統計表.測試製作差距表()
        回合統計表.測試左右項差距次數()
        回合統計表.測試修改測試次數()
        回合統計表.測試製表()
        回合統計表.測試合併()
    }
    
    private static func 測試製作差距表() {
        let table1: 回合統計表 = 回合統計表()
        table1.重置(123, 名稱: "table1", 範圍: 2...3, 回合數上限: 2)
        table1.達成次數 = [
            [1,3,5],
            [0,1,2],
        ]
        let table2: 回合統計表 = 回合統計表()
        table2.重置(2, 名稱: "table2", 範圍: 2...2, 回合數上限: 2)
        table2.達成次數 = [
            [9,8,7],
        ]
        let table3: 回合統計表 = 回合統計表()
        table3.重置(3, 名稱: "table3", 範圍: 1...3, 回合數上限: 2)
        table3.達成次數 = [
            [9,8,7],
            [3,6,9],
            [1,2,3],
        ]
        
        let newTable2 = table1.製作差距表(table2) {"\($0 - $1)"}
        let newTable3 = table1.製作差距表(table3) {"\($0 - $1)"}
        assert(
            table1.達成次數 == [
                [1,3,5],
                [0,1,2],
            ]
        )
        assert(
            newTable2 == [
                ["-8","-5","-2"],
            ]
        )
        assert(
            newTable3 == [
                ["-2","-3","-4"],
                ["-1","-1","-1"],
            ]
        )
    }
    private static func 測試製表() {
        let 達成次數 = [[10, 20, 30], [5, 15, 25]]
        let result1 = 製表(達成次數, 50.0)
        assert(result1 == [["20.0", "40.0", "60.0"], ["10.0", "30.0", "50.0"]])
        
        let table = 回合統計表()
        table.重置(100, 名稱: "測試表", 範圍: 1...3, 回合數上限: 2)
        table.達成次數 = [
            [10, 20, 30],  // 應轉換為: ["10.0", "20.0", "30.0"]
            [40, 50, 60],  // 應轉換為: ["40.0", "50.0", "60.0"]
            [70, 80, 90]   // 應轉換為: ["70.0", "80.0", "90.0"]
        ]
        
        let result2 = 回合統計表.製表(table.達成次數, Double(table.測試次數整數))
        
        // 驗證結果
        assert(
            result2 == [
                ["10.0", "20.0", "30.0"],
                ["40.0", "50.0", "60.0"],
                ["70.0", "80.0", "90.0"]
            ],
            "製表結果不符合預期"
        )
    }
    private static func 測試左右項差距次數() {
        let table1: 回合統計表 = 回合統計表()
        table1.重置(123, 名稱: "table1", 範圍: 2...3, 回合數上限: 2)
        table1.達成次數 = [
            [1,3,5],
            [0,1,2],
        ]
        
        let newTable1 = table1.左右項差距次數()
        assert(
            table1.達成次數 == [
                [1,3,5],
                [0,1,2],
            ]
        )
        assert(
            newTable1.達成次數 == [
                [
                    0,
                    0,
                    0
                ],
                [
                    -1,
                    -2,
                    -3
                ],
            ]
        )
    }
    private static func 測試修改測試次數() {
        let table1: 回合統計表 = 回合統計表()
        table1.重置(123, 名稱: "table1", 範圍: 2...3, 回合數上限: 2)
        table1.達成次數 = [
            [1,3,5],
            [0,1,2],
        ]
        
        let newTable1 = table1.修改測試次數(10)
        assert(
            table1.達成次數 == [
                [1,3,5],
                [0,1,2],
            ]
        )
        assert(
            newTable1.達成次數 == [
                [10,30,50],
                [00,10,20],
            ]
        )
    }
    private static func 測試嚴格合併() {
        let table1 = 回合統計表()
        table1.重置(100, 名稱: "table", 範圍: 1...3, 回合數上限: 2)
        table1.達成次數 = [
            [1,3,5],
            [0,1,2],
        ]
        let table2 = 回合統計表()
        table2.重置(50, 名稱: "table", 範圍: 1...3, 回合數上限: 2)
        table2.達成次數 = [
            [9,8,7],
            [3,6,9],
        ]
        
        let newTable = 回合統計表.嚴格合併([table1, table2])
        assert(
            newTable.達成次數 == [
                [10,11,12],
                [3,7,11],
            ]
        )
        assert( newTable.測試次數整數 == 150 )
    }
    private static func 測試合併() {
        // 創建測試用的統計表
        let tableA1 = 回合統計表()
        tableA1.重置(100, 名稱: "測試表A", 範圍: 1...2, 回合數上限: 2)
        tableA1.達成次數 = [
            [10, 20, 30],
            [40, 50, 60]
        ]
        
        let tableA2 = 回合統計表()
        tableA2.重置(100, 名稱: "測試表A", 範圍: 1...2, 回合數上限: 2)
        tableA2.達成次數 = [
            [70, 80, 90],
            [100, 110, 120]
        ]
        
        let tableB1 = 回合統計表()
        tableB1.重置(100, 名稱: "測試表B", 範圍: 1...2, 回合數上限: 2)
        tableB1.達成次數 = [
            [15, 25, 35],
            [45, 55, 65]
        ]
        
        let tableB2 = 回合統計表()
        tableB2.重置(100, 名稱: "測試表B", 範圍: 2...3, 回合數上限: 2)
        tableB2.達成次數 = [
            [15, 25, 35],
            [70, 80, 90]
        ]
        
        // 測試合併結果
        let result = 合併([tableA1, tableA2, tableB1, tableB2])
        
        // 驗證結果數量
        assert(result.count == 3, "合併後應該有3個統計表")
        
        // 驗證第一個合併結果（測試表A）
        let mergedTableA = result.first(where: { $0.名稱 == "測試表A" })!
        assert(mergedTableA.x軸範圍 == 1...2, "合併後的範圍不正確")
        assert(
            mergedTableA.達成次數 == [
                [80, 100, 120],
                [140, 160, 180]
            ],
            "合併後的數據不正確"
        )
        
        // 驗證第二個結果（測試表B）
        let mergedTableB1 = result.first(where: { $0.名稱 == "測試表B" })!
        assert(mergedTableB1.x軸範圍 == 1...2, "測試表B的範圍不應改變")
        assert(
            mergedTableB1.達成次數 == [
                [15, 25, 35],
                [45, 55, 65]
            ],
            "測試表B的數據不應改變"
        )
        let mergedTableB2 = result.last(where: { $0.名稱 == "測試表B" })!
        assert(mergedTableB2.x軸範圍 == 2...3, "測試表B的範圍不應改變")
        assert(
            mergedTableB2.達成次數 == [
                [15, 25, 35],
                [70, 80, 90]
            ],
            "測試表B的數據不應改變"
        )
    }
}

extension [回合統計表] {
    func 印出JSON(_ 名稱: String? = nil) {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyyMMdd"
        let 現在日期 = dateFormatter.string(from: Date())
        let 名稱 = 名稱 ?? "array\(現在日期)"
        
        let 文字標註符號 = "\"\"\""
        print("let \(名稱) = [")
        
        for table in self {
            print(文字標註符號)
            print(table.jsonString!)
            print(文字標註符號)
            print(",")
        }
        print("]")
    }
}

let jsonArray = [
"""
{"目前x軸":2,"x軸範圍":[2,14],"測試次數":1000000,"測試次數整數":1000000,"名稱":"皮卡丘EX, 大木博士 > 精靈球","達成次數":[[4259,143763,107063,108198,119836,123709,119708,107164,87141,60163,16725,2271,0,0,0,0,0,0,0,0,0],[15771,236489,165685,145635,137831,116974,87943,56556,28149,7928,1039,0,0,0,0,0,0,0,0,0,0],[34897,319759,198363,151358,122512,85845,51433,25071,8795,1800,167,0,0,0,0,0,0,0,0,0,0],[61014,385915,205103,137223,95874,58541,31867,15600,6792,1844,227,0,0,0,0,0,0,0,0,0,0],[93050,432026,192421,114678,72695,43683,26019,15286,7623,2217,302,0,0,0,0,0,0,0,0,0,0],[130189,455007,169340,92487,58467,38644,26522,17158,9119,2718,349,0,0,0,0,0,0,0,0,0,0],[169791,458698,143181,76251,52658,38631,28279,18842,10337,2913,419,0,0,0,0,0,0,0,0,0,0],[212032,443003,119117,68011,51123,40410,30465,20574,11406,3414,445,0,0,0,0,0,0,0,0,0,0],[253821,414043,102925,64137,52330,42412,32001,21751,12414,3654,512,0,0,0,0,0,0,0,0,0,0],[296122,374496,93668,63963,53944,43445,33476,23178,13197,3975,536,0,0,0,0,0,0,0,0,0,0],[335073,330313,91134,65078,55340,44871,34621,24489,14131,4307,643,0,0,0,0,0,0,0,0,0,0],[372476,286295,91896,66694,56253,45873,35366,25231,14796,4455,665,0,0,0,0,0,0,0,0,0,0],[402388,248262,93209,67821,57796,47162,36639,25913,15242,4868,700,0,0,0,0,0,0,0,0,0,0]]}
"""
,

"""
{"測試次數整數":1000000,"x軸範圍":[2,14],"測試次數":1000000,"達成次數":[[4116,130506,107291,109356,122209,125977,121896,109294,89078,61087,16926,2264,0,0,0,0,0,0,0,0,0],[15724,225686,167885,147447,140033,118926,89053,57250,29025,7972,999,0,0,0,0,0,0,0,0,0,0],[35320,310797,200874,154051,123845,86975,52323,25152,8711,1810,142,0,0,0,0,0,0,0,0,0,0],[60931,379747,207420,138970,96839,59492,32174,15631,6796,1783,217,0,0,0,0,0,0,0,0,0,0],[93472,427405,194450,115309,73342,44039,26397,15448,7659,2215,264,0,0,0,0,0,0,0,0,0,0],[129900,452329,170547,93384,58941,38863,26682,17102,9280,2655,317,0,0,0,0,0,0,0,0,0,0],[169215,456448,144814,76670,52651,38634,28628,19247,10363,2932,398,0,0,0,0,0,0,0,0,0,0],[211083,442005,120129,68210,51660,40884,30333,20716,11205,3324,451,0,0,0,0,0,0,0,0,0,0],[254464,412874,103164,64634,52557,42171,31913,21719,12266,3722,516,0,0,0,0,0,0,0,0,0,0],[295181,373855,93949,64614,53966,43664,33594,23331,13301,3998,547,0,0,0,0,0,0,0,0,0,0],[335914,329230,91234,65559,55743,44898,34174,24173,14037,4418,620,0,0,0,0,0,0,0,0,0,0],[370973,286437,92731,67046,56280,46456,35586,24871,14598,4382,640,0,0,0,0,0,0,0,0,0,0],[402273,248417,93264,67560,57730,47179,36547,26166,15402,4815,647,0,0,0,0,0,0,0,0,0,0]],"名稱":"皮卡丘EX, 精靈球 > 大木博士","目前x軸":2}
"""
,
"""
{"名稱":"皮卡丘EX, 無","測試次數整數":1000000,"x軸範圍":[2,14],"測試次數":1000000,"達成次數":[[4085,6352,10278,15525,21620,28609,37245,46744,56891,68345,80537,94192,107986,123862,139807,157922,0,0,0,0,0],[15588,21578,33360,46375,59429,72137,83769,92302,99569,102229,100828,93700,81531,62522,35083,0,0,0,0,0,0],[34588,44369,63357,80703,94854,104266,108674,106836,99697,87461,70329,51958,33170,15846,3892,0,0,0,0,0,0],[61226,69823,92832,109497,116905,116268,107767,94143,77000,58832,41343,26493,15379,8283,4209,0,0,0,0,0,0],[92766,96462,118063,126839,123922,110572,92643,73156,54398,39077,27090,18646,13144,8851,4371,0,0,0,0,0,0],[129706,120968,134569,132325,116833,95978,74381,55102,41070,30269,23485,18296,13498,9075,4445,0,0,0,0,0,0],[169386,140462,143135,127498,103187,79031,59273,44294,35062,28575,23429,18668,14085,9307,4608,0,0,0,0,0,0],[211942,154189,142143,115007,87444,65012,49461,40377,33651,28611,23669,19454,14568,9735,4737,0,0,0,0,0,0],[254528,159793,133875,100817,73194,56411,46050,39222,34049,29144,24440,19288,14795,9542,4852,0,0,0,0,0,0],[295683,159542,120524,85869,63720,52022,45041,39091,34802,29445,24788,19909,14842,9703,5019,0,0,0,0,0,0],[334872,151839,105451,73943,58494,50233,45258,40254,34702,29705,25004,20105,14916,10209,5015,0,0,0,0,0,0],[371145,136871,90566,66606,56210,50486,45556,40462,35125,30521,25548,20598,15238,10009,5059,0,0,0,0,0,0],[402461,119884,78076,62376,56011,51157,46089,41006,35694,30642,25382,20564,15368,10188,5102,0,0,0,0,0,0]],"目前x軸":2}
"""
,
"""
{"名稱":"沙奈朵, 無","達成次數":[[0,0,0,314484,84873,85447,85024,81476,75787,68734,60313,51253,40253,29106,17430,5820,0,0,0,0,0],[0,0,0,250795,79582,84060,86590,86402,83467,78015,70413,60179,49078,36337,23263,9857,1962,0,0,0,0],[0,0,0,218796,76724,84100,88076,89002,87017,82350,74614,64699,53439,40451,25994,11846,2892,0,0,0,0],[0,0,0,200157,75272,82813,88834,90335,89592,84875,77589,67959,56354,42178,27876,12695,3471,0,0,0,0],[0,0,0,186642,74307,82797,88412,91602,91059,87198,79798,70167,57301,44227,29137,13384,3969,0,0,0,0],[0,0,0,177686,73079,83048,89488,92450,92159,87892,80685,71351,58916,44866,30005,14246,4129,0,0,0,0],[0,0,0,170992,72344,83029,89712,92806,92757,88912,81980,72215,59618,46005,30407,14770,4453,0,0,0,0],[0,0,0,166230,72294,81622,89558,93367,93338,89472,82744,73101,60817,46602,31166,15091,4598,0,0,0,0],[0,0,0,161771,71922,82178,89907,93593,93962,89757,83622,73747,60799,46869,31866,15419,4588,0,0,0,0]],"目前x軸":0,"x軸範圍":[0,8],"測試次數整數":1000000,"測試次數":1000000}
"""
,
"""
{"達成次數":[[0,0,54584,6955,6407,5797,5209,4695,4185,3486,2919,2334,1764,1107,558,0,0,0,0,0,0],[0,0,43905,7336,7061,6667,6475,5804,5349,4701,3927,3294,2581,1775,959,166,0,0,0,0,0],[0,0,38867,7532,7541,7355,6858,6368,5912,5096,4485,3674,2804,2018,1196,294,0,0,0,0,0],[0,0,35618,7771,7705,7501,7117,6751,6258,5545,4795,3864,3175,2231,1302,367,0,0,0,0,0],[0,0,33513,7805,7745,7642,7298,6978,6395,5823,5104,4184,3318,2382,1411,402,0,0,0,0,0],[0,0,32214,7875,7831,7773,7517,7170,6615,5980,5128,4292,3346,2353,1493,413,0,0,0,0,0],[0,0,31118,7706,7947,7930,7729,7284,6719,6016,5379,4417,3491,2473,1385,406,0,0,0,0,0],[0,0,30304,8022,7967,7900,7719,7480,6701,6177,5246,4557,3488,2521,1453,465,0,0,0,0,0],[0,0,29432,7984,8072,8060,8011,7317,6756,6128,5550,4616,3588,2510,1505,471,0,0,0,0,0]],"測試次數整數":100000,"x軸範圍":[0,8],"名稱":"寶石海星, 無","目前x軸":0,"測試次數":100000}
"""
,
"""
{"測試次數整數":1000000,"測試次數":1000000,"名稱":"沙奈朵, 大木博士","目前x軸":0,"x軸範圍":[0,8],"達成次數":[[0,0,0,434487,90543,88303,83110,76317,66902,56480,45017,32587,19718,6536,0,0,0,0,0,0,0],[0,0,0,364159,90856,91770,90373,84806,77435,66568,54353,40628,26014,10904,2134,0,0,0,0,0,0],[0,0,0,327696,91036,93902,93350,89879,82462,72354,59057,44881,29092,13006,3285,0,0,0,0,0,0],[0,0,0,306382,90389,95156,95849,92700,84962,74821,62150,47678,31477,14511,3925,0,0,0,0,0,0],[0,0,0,292606,90891,96039,96583,93850,87487,77149,63804,49359,32477,15370,4385,0,0,0,0,0,0],[0,0,0,282259,91387,95797,97667,95853,88793,78508,65956,50074,33178,15863,4665,0,0,0,0,0,0],[0,0,0,274185,90861,97129,99022,96406,89762,79976,66261,51210,34221,16151,4816,0,0,0,0,0,0],[0,0,0,267902,90757,97687,99032,97240,90685,80570,67567,51726,34704,16942,5188,0,0,0,0,0,0],[0,0,0,263780,91050,97584,98951,97777,91142,81423,68696,52368,35183,16849,5197,0,0,0,0,0,0]]}
"""
,
"""
{"目前x軸":0,"名稱":"沙奈朵, 精靈球","測試次數整數":300000,"測試次數":300000,"x軸範圍":[0,8],"達成次數":[[0,0,0,79585,27939,28754,28988,27658,25613,22945,19620,15908,11848,7476,3181,485,0,0,0,0,0],[0,0,0,79460,28338,29010,29198,27905,26123,23241,19808,15691,11552,7086,2475,113,0,0,0,0,0],[0,0,0,72736,27312,29041,29421,28798,26854,24534,20968,16864,12447,7889,2853,283,0,0,0,0,0],[0,0,0,65641,26665,28876,29718,29380,27871,25597,22308,18106,13491,8474,3295,578,0,0,0,0,0],[0,0,0,60347,25854,28573,29887,29591,28895,26429,23077,19164,14445,9211,3755,772,0,0,0,0,0],[0,0,0,56142,25035,28062,29918,30385,29407,27367,24000,19854,15055,9785,4101,889,0,0,0,0,0],[0,0,0,53081,24675,27898,29794,30544,29927,28047,24424,20360,15697,9996,4520,1037,0,0,0,0,0],[0,0,0,50059,24260,27464,30270,30994,30420,28230,25421,20803,16048,10285,4522,1224,0,0,0,0,0],[0,0,0,47535,23868,27826,30011,30785,30480,28985,25336,21583,16414,10951,4900,1326,0,0,0,0,0]]}
"""
,
"""
{"x軸範圍":[0,8],"測試次數":300000,"測試次數整數":300000,"達成次數":[[0,0,0,102966,26982,27274,26406,25282,22749,20205,16794,13673,9730,5952,1987,0,0,0,0,0,0],[0,0,0,83554,26113,26899,27619,26991,25415,23115,20123,16262,12249,7717,3246,697,0,0,0,0,0],[0,0,0,73147,25319,27017,27976,28202,26918,24507,21578,17831,13558,8899,4033,1015,0,0,0,0,0],[0,0,0,66658,24846,27230,28892,28854,27733,25716,22409,18584,14164,9357,4408,1149,0,0,0,0,0],[0,0,0,63182,24710,27251,28926,29110,27870,26284,23016,19278,14708,9764,4609,1292,0,0,0,0,0],[0,0,0,60022,24655,27520,28835,29377,28246,26653,23689,19715,15007,10123,4735,1423,0,0,0,0,0],[0,0,0,57996,24075,27202,28778,29731,28867,27122,24116,19963,15383,10385,4900,1482,0,0,0,0,0],[0,0,0,56105,24163,27579,29495,29771,29202,27169,24308,20027,15401,10284,4926,1570,0,0,0,0,0],[0,0,0,55196,24105,27238,29448,29884,29104,27021,24684,20405,15607,10651,5075,1582,0,0,0,0,0]],"目前x軸":0,"名稱":"沙奈朵, 幻之石板"}
"""
,
"""
{"測試次數整數":300000,"x軸範圍":[0,8],"測試次數":300000,"達成次數":[[0,0,192474,19718,17636,15629,13534,11807,9712,7771,5904,3919,1896,0,0,0,0,0,0,0,0],[0,0,162359,22323,20725,19317,17588,15508,13186,10810,8401,5885,3188,710,0,0,0,0,0,0,0],[0,0,147580,23424,22603,21157,19122,17351,14779,12630,9668,6888,3917,881,0,0,0,0,0,0,0],[0,0,138929,24075,23454,22398,20401,18366,15682,13176,10540,7385,4413,1181,0,0,0,0,0,0,0],[0,0,132808,24801,24132,22772,21202,19020,16712,13824,10981,7789,4608,1351,0,0,0,0,0,0,0],[0,0,128715,25094,24271,23440,21905,19715,17030,14440,11160,8080,4762,1388,0,0,0,0,0,0,0],[0,0,125459,25280,24790,23899,22150,20060,17482,14694,11634,8285,4834,1433,0,0,0,0,0,0,0],[0,0,123136,25553,25246,23801,22376,20591,17768,14842,11811,8391,4966,1519,0,0,0,0,0,0,0],[0,0,120932,25588,25366,24352,22692,20586,18133,15063,12023,8596,5122,1547,0,0,0,0,0,0,0]],"目前x軸":0,"名稱":"寶石海星, 大木博士"}
"""
,
"""
{"測試次數整數":300000,"目前x軸":0,"測試次數":300000,"名稱":"寶石海星, 精靈球","x軸範圍":[0,8],"達成次數":[[0,0,148828,24788,22482,20171,18101,15791,13727,11677,9201,7246,4819,2678,491,0,0,0,0,0,0],[0,0,148124,25261,22982,20363,18501,16174,13812,11469,9231,6954,4696,2334,99,0,0,0,0,0,0],[0,0,136737,25231,23565,21795,19743,17508,15456,12934,10540,7949,5385,2879,278,0,0,0,0,0,0],[0,0,125403,25334,24456,23031,21017,19065,16682,14321,11726,8738,6212,3493,522,0,0,0,0,0,0],[0,0,115165,25598,24850,23830,22252,20153,18148,15565,12699,9991,7054,3881,814,0,0,0,0,0,0],[0,0,108168,25784,25563,24611,22676,21145,19003,16380,13489,10637,7424,4169,951,0,0,0,0,0,0],[0,0,102642,25791,25554,25204,23689,21596,19523,17125,14132,11212,7949,4469,1114,0,0,0,0,0,0],[0,0,97325,25815,26075,25491,24383,22326,20271,17594,14988,11589,8171,4747,1225,0,0,0,0,0,0],[0,0,93557,25688,26454,25761,24970,23001,20679,18302,15153,11817,8502,4835,1281,0,0,0,0,0,0]]}
"""
]
